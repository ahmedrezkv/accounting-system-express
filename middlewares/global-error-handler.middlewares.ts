import { ErrorRequestHandler } from "express";
import { getStatusMessage } from "../lib/operational-error";

const globalErrorHandler: ErrorRequestHandler = function (err, req, res, next) {
  /* If you call next() with an error after you have started writing the response (for example, if you encounter an error while streaming the response to the client) the Express default error handler closes the connection and fails the request.
So when you add a custom error handler, you must delegate to the default Express error handler, when the headers have already been sent to the client. */
  if (res.headersSent) return next(err);

  /* Adjust errors that are not generated by us (generated by other libraries) and are operational */
  if (err.name === "ValidationError") {
    err.statusCode ??= 400;
    const errors = Object.entries(err.errors)
      .map(([key, value]) => [`${key[0].toUpperCase()}${key.slice(1)}`, ` ${value}`])
      .join(". ");
    err.message = `Validation failed: ${errors}.`;
    err.isOperational = true;
  }

  if (err.name === "MongoServerError" && err.code === 11000) {
    err.statusCode ??= 400;
    const fieldName = Object.keys(err.keyValue).toString();
    const fieldValue = Object.values(err.keyValue).toString();
    err.message = `"${fieldValue}" is a duplicate ${fieldName} field.`;
    err.isOperational = true;
  }

  if (err.name === "CastError") {
    err.statusCode ??= 400;
    err.message = `Casting failed for ${err.path}: ${err.value}.`;
    err.isOperational = true;
  }

  if (err.name === "TokenExpiredError") {
    err.statusCode ??= 401;
    err.message = "User access token has expired.";
    err.isOperational = true;
  }

  if (err.name === "JsonWebTokenError") {
    err.statusCode ??= 401;
    err.message = "User authentication failed.";
    err.isOperational = true;
  }

  /* Defaults for statusCode and statusMessage */
  err.statusCode ??= 500;
  err.statusMessage = getStatusMessage(err.statusCode);

  /* Send response based on node environment */
  if (process.env.NODE_ENV === "production") {
    /* Overwrite messages of programming errors */
    if (!err.isOperational) err.message = "Something went wrong.";

    console.log("ðŸ›‘ Error:\n", { ...err, stack: err.stack });
    res.status(err.statusCode).json({
      statusMessage: err.statusMessage,
      message: err.message,
    });
  } else {
    res.status(err.statusCode).json({
      statusMessage: err.statusMessage,
      message: err.message,
      error: { ...err, stack: err.stack },
    });
  }
};

export default globalErrorHandler;
